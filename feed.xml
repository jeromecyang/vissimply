<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-14T15:27:59-04:00</updated><id>/</id><title type="html">visualize simply</title><subtitle>Visualize data simply means to make them easy-to-build, succinct and comprehensible. A blog authored by Jerome Yang, a UI/UX, visualization, map and graphic enthusiast.
</subtitle><entry><title type="html">Manipulate SVG elements with Angular.js</title><link href="/about/2017/04/29/manipulate-svg-with-angular.html" rel="alternate" type="text/html" title="Manipulate SVG elements with Angular.js" /><published>2017-04-29T16:00:00-04:00</published><updated>2017-04-29T16:00:00-04:00</updated><id>/about/2017/04/29/manipulate-svg-with-angular</id><content type="html" xml:base="/about/2017/04/29/manipulate-svg-with-angular.html">&lt;p&gt;When it comes to creating visualizations on a web UI, the first JavaScript library we usually think of is d3.js. d3.js is very powerful as it handles the logic to consume data, arrange graphics and manipulate. Nonetheless, in many cases we may be a mix-and-match approach, by which we can take advantage of multiple libraries. In the past two years, my organization has been developing a business intelligence platform based on d3.js and Angular.js. While building this product, I constantly ask myself a question: what is the best way to integrate d3.js and Angular in one web application?&lt;/p&gt;

&lt;p&gt;My thinking and exploration in the past two years yielded a fuzzy conclusion: it depends. There is no “best” way that can be applied universally. Furthermore, in certain cases, you may be able to achieve your goal without such integration. In this series, I will introduce a few scenarios, and give my recommendations to each of the scenarios.&lt;/p&gt;</content><author><name></name></author><summary type="html">When it comes to creating visualizations on a web UI, the first JavaScript library we usually think of is d3.js. d3.js is very powerful as it handles the logic to consume data, arrange graphics and manipulate. Nonetheless, in many cases we may be a mix-and-match approach, by which we can take advantage of multiple libraries. In the past two years, my organization has been developing a business intelligence platform based on d3.js and Angular.js. While building this product, I constantly ask myself a question: what is the best way to integrate d3.js and Angular in one web application?</summary></entry><entry><title type="html">About this site</title><link href="/about/2017/04/24/about.html" rel="alternate" type="text/html" title="About this site" /><published>2017-04-24T19:35:03-04:00</published><updated>2017-04-24T19:35:03-04:00</updated><id>/about/2017/04/24/about</id><content type="html" xml:base="/about/2017/04/24/about.html">&lt;p&gt;Having been a UI/UX and visualization professional for years, there are some remarkable moments in my career. Some of these moments are big gotcha’s, but more frequently, they are moments when I realized “it’s not a good idea to do this”, “I should have gone the other way”, or even “I still have no idea how to do it, but I learned what’s probably not gonna work out”. And of course, there are also moments when I simply came up with some visualization ideas and couldn’t refrain from sharing with others.&lt;/p&gt;

&lt;p&gt;This is why I started this website/blog: I would like to share my ideas, experiences or even failures. I firmly believe in the collaborative nature of the developer community. While it’s possible to tweet a few words or push code to github, often ideas need to be communicated in articles to audience. Therefore, this will be a place where I publish articles and link to my works or additional resources elsewhere.&lt;/p&gt;</content><author><name></name></author><summary type="html">Having been a UI/UX and visualization professional for years, there are some remarkable moments in my career. Some of these moments are big gotcha’s, but more frequently, they are moments when I realized “it’s not a good idea to do this”, “I should have gone the other way”, or even “I still have no idea how to do it, but I learned what’s probably not gonna work out”. And of course, there are also moments when I simply came up with some visualization ideas and couldn’t refrain from sharing with others.</summary></entry></feed>